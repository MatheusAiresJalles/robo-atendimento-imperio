import csv
import pandas as pd
import matplotlib.pyplot as plt
from datetime import datetime, time
import random
import pywhatkit as kit
import json

# ======================
# CARREGAR CONFIGURA√á√ïES
# ======================
def carregar_configuracoes():
    try:
        with open("caminho/para/config.json", "r") as config_file:
            return json.load(config_file)
    except FileNotFoundError:
        print("Erro: O arquivo 'config.json' n√£o foi encontrado.")
        return {"horario_comercial": {"inicio": "08:00", "fim": "18:00"}}  # Valores padr√£o

config = {
    "horario_comercial": {
        "inicio": "08:00",
        "fim": "18:00"
    }
}

# ======================
# VERIFICAR HOR√ÅRIO
# ======================
def verificar_horario():
    agora = datetime.now()
    hora_atual = agora.time()
    dia_semana = agora.weekday()  # 0-6 (segunda-domingo)

    inicio_comercial = datetime.strptime(config["horario_comercial"]["inicio"], "%H:%M").time()
    fim_comercial = datetime.strptime(config["horario_comercial"]["fim"], "%H:%M").time()

    # Hor√°rio de atendimento humano: segunda a sexta
    if dia_semana < 5 and inicio_comercial <= hora_atual <= fim_comercial:
        return False  # N√£o executar o rob√¥ (hor√°rio comercial)
    return True  # Executar o rob√¥ (fora do hor√°rio comercial)

# ======================
# REGISTRAR LOG
# ======================
def registrar_log(mensagem):
    with open("log_execucao.txt", "a", encoding="utf-8") as log_file:
        log_file.write(f"{datetime.now()} - {mensagem}\n")

if verificar_horario():
    registrar_log("Rob√¥ em execu√ß√£o (fora do hor√°rio comercial).")
    print("Rob√¥ em execu√ß√£o (fora do hor√°rio comercial)...")
else:
    registrar_log("Atendimento humano ativo (hor√°rio comercial). Rob√¥ pausado.")
    print("Atendimento humano ativo (hor√°rio comercial). Rob√¥ pausado.")

# ======================
# CAT√ÅLOGO DE PRODUTOS
# ======================
catalogo = {
    "copos": {
        "twister 500ml": 2.50,
        "long drink 350ml": 2.90,
        "ta√ßa gin 580ml": 4.20
    },
    "canecas": {
        "caneca acr√≠lica 300ml": 3.10,
        "caneca gel 500ml": 5.00
    }
}

# ======================
# HOR√ÅRIO COMERCIAL
# ======================
horario_comercial = {
    "inicio": "08:00",
    "fim": "18:00"
}

# ======================
# SIMULA√á√ÉO DE CONVERSAS
# ======================
def gerar_conversas():
    clientes = ["Ana", "Bruno", "Carla", "Daniel", "Eduarda", "Fernando", "Gabriela", "Hugo"]
    mensagens = [
        "Quero cat√°logo e pre√ßos",
        "Qual valor da ta√ßa gin?",
        "Voc√™s t√™m copo twister?",
        "Preciso de canecas gel",
        "Demoraram muito para responder",
        "Atendimento horr√≠vel",
        "Quero comprar v√°rios copos",
        "T√™m desconto para grande quantidade?"
    ]
    return [{"cliente": random.choice(clientes), "mensagem": random.choice(mensagens)} for _ in range(20)]

conversas = gerar_conversas()

try:
    with open("conversas_log.csv", "w", newline="", encoding="utf-8") as csvfile:
        writer = csv.writer(csvfile)
        writer.writerow(["data", "cliente", "mensagem", "resposta"])
        for conversa in conversas:
            resposta = "Cat√°logo: [link_catalogo_aqui]\n"
            writer.writerow([datetime.now(), conversa["cliente"], conversa["mensagem"], resposta.strip()])
except Exception as e:
    print(f"Erro ao criar o log de conversas: {e}")

# ======================
# SIMULA√á√ÉO DE DADOS
# ======================
def gerar_dados_antes():
    """
    Simula os dados antes da implementa√ß√£o do rob√¥.
    Representa mensagens recebidas de clientes com problemas comuns.
    """
    problemas = [
        "Cat√°logo n√£o enviado",
        "Or√ßamento solicitado no fim de semana",
        "D√∫vida sobre pre√ßos de produtos",
        "Sem atendimento no fim de semana",
        "Venda perdida por falta de resposta"
    ]
    dados = []
    for _ in range(100):  # Simula at√© 100 mensagens recebidas
        dados.append({
            "Tempo_Resposta_Horas": random.uniform(24, 48),  # Resposta demorada (1 a 2 dias)
            "Resolvido": "N√£o",  # Todos os problemas n√£o resolvidos
            "Descricao_Problema": random.choice(problemas)
        })
    return dados

def gerar_dados_depois():
    """
    Simula os dados depois da implementa√ß√£o do rob√¥.
    Representa mensagens resolvidas automaticamente pelo rob√¥.
    """
    solucoes = [
        "Cat√°logo enviado automaticamente",
        "Or√ßamento respondido no fim de semana",
        "Pre√ßos informados rapidamente",
        "Atendimento fora do hor√°rio realizado pelo rob√¥",
        "Venda concretizada com resposta imediata"
    ]
    dados = []
    for _ in range(100):  # Simula at√© 100 mensagens resolvidas pelo rob√¥
        dados.append({
            "Tempo_Resposta_Minutos": random.randint(1, 60),  # Resposta r√°pida (1 a 60 minutos)
            "Resolvido": "Sim",  # Todas resolvidas pelo rob√¥
            "Descricao_Problema": random.choice(solucoes)
        })
    return dados

# ======================
# CRIA√á√ÉO DOS DATAFRAMES
# ======================
df_antes = pd.DataFrame(gerar_dados_antes())
df_depois = pd.DataFrame(gerar_dados_depois())

# Salvar os dados simulados em arquivos CSV
try:
    df_antes.to_csv("historico_atendimento_antes.csv", index=False)
    df_depois.to_csv("historico_atendimento_depois.csv", index=False)
except Exception as e:
    print(f"Erro ao salvar os dados hist√≥ricos: {e}")

# Verificar valores √∫nicos na coluna "Resolvido"
print("Valores √∫nicos na coluna 'Resolvido':", df_antes["Resolvido"].unique())

# Verificar se o total de mensagens est√° correto
print(f"Total de mensagens simuladas antes do rob√¥: {df_antes.shape[0]}")

# ======================
# GR√ÅFICOS DE PROBLEMAS (ANTES DO ROB√î)
# ======================
def graficos_problemas_antes():
    """
    Gera gr√°ficos baseados nos dados simulados antes do rob√¥.
    """
    tempo_medio = df_antes["Tempo_Resposta_Horas"].mean()
    nao_resolvidos = df_antes.shape[0]  # Todos os problemas s√£o "N√£o resolvidos"
    total = df_antes.shape[0]

    # Gr√°fico de Barras - Problemas
    plt.figure(figsize=(8, 5))
    bars = plt.bar(["Tempo M√©dio (Horas)", "N√£o Resolvidos", "Total"],
                   [tempo_medio, nao_resolvidos, total], 
                   color=['#87CEEB', '#FFA07A', '#D3D3D3'])
    plt.title("üî¥ Indicadores Antes do Rob√¥")
    plt.ylabel("Quantidade")

    # Adicionar r√≥tulos em cada barra
    for bar in bars:
        plt.text(bar.get_x() + bar.get_width() / 2, bar.get_height() - 1, 
                 f'{int(bar.get_height())}', ha='center', va='bottom')

    plt.tight_layout()
    plt.savefig("grafico_problemas_barras.png")
    plt.show()

    # Gr√°fico de Pizza - Problemas
    plt.figure(figsize=(6, 6))
    plt.pie([nao_resolvidos], 
            labels=["N√£o Resolvidos"],
            autopct=lambda p: f'{int(p)}%',
            colors=['#FFA07A'],
            startangle=90)
    plt.title("üîç Resolu√ß√£o Antes do Rob√¥")
    plt.tight_layout()
    plt.savefig("grafico_problemas_pizza.png")
    plt.show()

# ======================
# GR√ÅFICOS DE SOLU√á√ïES (DEPOIS DO ROB√î)
# ======================
def graficos_solucoes_depois():
    tempo_medio = df_depois["Tempo_Resposta_Minutos"].mean()
    resolvidos = df_depois[df_depois["Resolvido"] == "Sim"].shape[0]
    nao_resolvidos = df_depois[df_depois["Resolvido"] == "Nao"].shape[0]
    total = df_depois.shape[0]

    # Gr√°fico de Barras - Solu√ß√µes
    plt.figure(figsize=(8, 5))
    plt.bar(["Tempo M√©dio (Minutos)", "Resolvidos", "N√£o Resolvidos", "Total"],
            [tempo_medio, resolvidos, nao_resolvidos, total], 
            color=['#98FB98', '#32CD32', '#FF6347', '#D3D3D3'])  # Cores mais definidas
    plt.title("üü¢ Indicadores Depois do Rob√¥")
    plt.tight_layout()
    plt.savefig("grafico_solucoes_barras.png")
    plt.show()

    # Gr√°fico de Pizza - Solu√ß√µes
    plt.figure(figsize=(6, 6))
    plt.pie([resolvidos, max(1, nao_resolvidos)], 
            labels=["Resolvidos", "N√£o Resolvidos"],
            autopct=lambda p: f'{int(p)}%',  # Porcentagens inteiras
            colors=['#32CD32', '#FF6347'],  # Cores mais definidas
            startangle=90)
    plt.title("üìä Resolu√ß√£o Depois do Rob√¥")
    plt.tight_layout()
    plt.savefig("grafico_solucoes_pizza.png")
    plt.show()

# ======================
# GR√ÅFICO POR DESCRI√á√ÉO
# ======================
def grafico_por_descricao(df, titulo, arquivo):
    descricao_counts = df["Descricao_Problema"].value_counts()
    plt.figure(figsize=(10, 6))
    descricao_counts.plot(kind="bar", color="skyblue")
    plt.title(titulo)
    plt.xlabel("Descri√ß√£o do Problema")
    plt.ylabel("Quantidade")
    plt.tight_layout()
    plt.savefig(arquivo)
    plt.show()

# ======================
# GR√ÅFICOS COMPARATIVOS
# ======================
def gerar_graficos_comparativos():
    # Dados para gr√°ficos
    resolvidos_antes = df_antes[df_antes["Resolvido"] == "Sim"].shape[0]
    nao_resolvidos_antes = df_antes[df_antes["Resolvido"] == "N√£o"].shape[0]

    resolvidos_depois = df_depois[df_depois["Resolvido"] == "Sim"].shape[0]
    nao_resolvidos_depois = df_depois[df_depois["Resolvido"] == "N√£o"].shape[0]

    # Gr√°ficos de Pizza
    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 6))

    # Antes do Rob√¥
    ax1.pie([resolvidos_antes, nao_resolvidos_antes], 
            labels=["Resolvidos", "N√£o Resolvidos"], 
            autopct='%1.1f%%', colors=['lightgreen', 'lightcoral'], startangle=90)
    ax1.set_title("Antes do Rob√¥")

    # Depois do Rob√¥
    ax2.pie([resolvidos_depois, nao_resolvidos_depois], 
            labels=["Resolvidos", "N√£o Resolvidos"], 
            autopct='%1.1f%%', colors=['lightgreen', 'lightcoral'], startangle=90)
    ax2.set_title("Depois do Rob√¥")

    plt.tight_layout()
    plt.savefig("graficos_comparativos.png")
    plt.show()

# ======================
# ENVIO DE MENSAGEM PELO WHATSAPP
# ======================
def enviar_mensagem_whatsapp(numero, mensagem):
    try:
        kit.sendwhatmsg_instantly(numero, mensagem, wait_time=10, tab_close=True)
        print(f"Mensagem enviada para {numero}: {mensagem}")
    except Exception as e:
        print(f"Erro ao enviar mensagem para {numero}: {e}")

# ======================
# SIMULA√á√ÉO DE ATENDIMENTO
# ======================
def simular_atendimento():
    """
    Simula o atendimento do rob√¥ com base em mensagens predefinidas.
    """
    mensagens_recebidas = [
        "Quero cat√°logo e pre√ßos",
        "Qual valor da ta√ßa gin?",
        "Voc√™s t√™m copo twister?",
        "Preciso de canecas gel",
        "Demoraram muito para responder",
        "Atendimento horr√≠vel",
        "Quero comprar v√°rios copos",
        "T√™m desconto para grande quantidade?"
    ]

    respostas_automaticas = {
        "Quero cat√°logo e pre√ßos": "Aqui est√° o cat√°logo: [link_catalogo]",
        "Qual valor da ta√ßa gin?": "A ta√ßa gin 580ml custa R$ 4,20.",
        "Voc√™s t√™m copo twister?": "Sim, temos copo twister 500ml por R$ 2,50.",
        "Preciso de canecas gel": "Claro! A caneca gel 500ml custa R$ 5,00.",
        "Demoraram muito para responder": "Pedimos desculpas pela demora. Como podemos ajudar?",
        "Atendimento horr√≠vel": "Sentimos muito pela experi√™ncia. Estamos aqui para resolver seu problema.",
        "Quero comprar v√°rios copos": "√ìtimo! Oferecemos descontos para grandes quantidades. Entre em contato para mais detalhes.",
        "T√™m desconto para grande quantidade?": "Sim, temos descontos progressivos. Entre em contato para mais informa√ß√µes."
    }

    # Simula o recebimento de mensagens e as respostas do rob√¥
    print("Simula√ß√£o de Atendimento do Rob√¥ no WhatsApp")
    print("=" * 40)

    for mensagem in mensagens_recebidas:
        print(f"Cliente: {mensagem}")
        resposta = respostas_automaticas.get(mensagem, "Desculpe, n√£o entendi sua mensagem.")
        print(f"Rob√¥: {resposta}")
        print("-" * 40)

# ======================
# SIMULA√á√ÉO DE ATENDIMENTO COM MENU
# ======================
def simular_atendimento_com_menu():
    """
    Simula o atendimento do rob√¥ com base em um menu de op√ß√µes predefinidas.
    """
    menu = """
    Ol√°! Sou um atendente virtual. Posso ajudar com as seguintes informa√ß√µes:
    1. Enviar o cat√°logo de produtos
    2. Informar o pre√ßo de um produto espec√≠fico
    3. Verificar disponibilidade de produtos
    4. Informar sobre descontos para grandes quantidades
    5. Esclarecer d√∫vidas gerais
    0. Sair
    Por favor, envie o n√∫mero da op√ß√£o desejada.
    """

    respostas_automaticas = {
        "1": "Aqui est√° o cat√°logo: [link_catalogo]",
        "2": "Por favor, informe o nome do produto para que eu possa informar o pre√ßo.",
        "3": "Sim, temos todos os produtos do cat√°logo dispon√≠veis. Qual produto voc√™ deseja?",
        "4": "Oferecemos descontos progressivos para grandes quantidades. Entre em contato para mais detalhes.",
        "5": "Estou aqui para ajudar! Por favor, envie sua d√∫vida.",
        "0": "Obrigado por entrar em contato! At√© logo."
    }

    while True:
        print(menu)
        mensagem = input("Digite sua op√ß√£o: ")
        resposta = respostas_automaticas.get(mensagem, "Op√ß√£o inv√°lida. Por favor, escolha uma op√ß√£o v√°lida do menu.")
        print(f"Rob√¥: {resposta}")
        if mensagem == "0":
            break
        print("-" * 40)

# ======================
# MENU PRINCIPAL
# ======================
def menu_principal():
    """
    Menu principal para escolher qual funcionalidade executar.
    """
    while True:
        print("\n=== Menu Principal ===")
        print("1. Gerar gr√°ficos automaticamente")
        print("2. Simular atendimento do rob√¥")
        print("3. Simular atendimento com menu")
        print("4. Enviar mensagem de teste pelo WhatsApp")
        print("5. Gerar gr√°ficos comparativos")
        print("0. Sair")
        opcao = input("Escolha uma op√ß√£o: ")

        if opcao == "1":
            # Gerar gr√°ficos automaticamente
            print("Gerando gr√°ficos...")
            graficos_problemas_antes()
            graficos_solucoes_depois()
            grafico_por_descricao(df_antes, "Problemas Antes do Rob√¥", "grafico_problemas_descricao_antes.png")
            grafico_por_descricao(df_depois, "Problemas Depois do Rob√¥", "grafico_problemas_descricao_depois.png")
            print("Gr√°ficos gerados com sucesso!")
        elif opcao == "2":
            # Simular atendimento do rob√¥
            print("Simulando atendimento do rob√¥...")
            simular_atendimento()
        elif opcao == "3":
            # Simular atendimento com menu
            print("Simulando atendimento com menu...")
            simular_atendimento_com_menu()
        elif opcao == "4":
            # Enviar mensagem de teste pelo WhatsApp
            print("Enviando mensagem de teste pelo WhatsApp...")
            numero_teste = "+5531996037730"
            mensagem_teste = "Ol√°! Esta √© uma mensagem de teste do rob√¥ de atendimento."
            enviar_mensagem_whatsapp(numero_teste, mensagem_teste)
        elif opcao == "5":
            # Gerar gr√°ficos comparativos
            print("Gerando gr√°ficos comparativos...")
            gerar_graficos_comparativos()
            print("Gr√°ficos comparativos gerados com sucesso!")
        elif opcao == "0":
            # Sair do programa
            print("Saindo do programa. At√© logo!")
            break
        else:
            print("Op√ß√£o inv√°lida. Por favor, escolha uma op√ß√£o v√°lida.")

# Executa o menu principal
menu_principal()